-- Represents an empty list
nil consCase nilCase = nilCase;

-- Prepends an element to a list
cons x xs = \consCase nilCase -> consCase x (xs consCase nilCase);

-- Folds a list from the right
foldr f z xs = xs f z;

-- Simulated foldl using foldr (builds a chain of function applications)
foldl f acc xs = foldr (\x g -> (\a -> g (f a x))) (\a -> a) xs acc;

-- The tail of a list
tail xs = \consCase nilCase ->
  xs (\x rest -> \skipped ->
    if skipped
      then consCase x (rest 1)
      else rest 1
  ) (\_ -> nilCase) 0;

-- The head of a list
head xs = xs (\x _ -> x) 0;

-- Maps a function over a list
map f xs = \consCase nilCase -> xs (\x rest -> consCase (f x) rest) nilCase;

-- Sums all elements in a list
sum = foldr (+) 0;

-- Example list: [1, 2, 3, 4]
exampleList = cons 1 (cons 2 (cons 3 (cons 4 nil)));

-- Converts a list of digits to the full number
print = foldl (\acc x -> acc * 10 + x) 0;

-- 468
main = print (tail (map ((*) 2) exampleList));
