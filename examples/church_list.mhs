-- Represents an empty list
nil consCase nilCase = nilCase;

-- Prepends an element to a list
cons x xs = \consCase nilCase -> consCase x (xs consCase nilCase);

-- Folds a list from the right
foldr f z xs = xs f z;

-- Simulated foldl using foldr (builds a chain of function applications)
foldl f acc xs = foldr (\x g -> (\a -> g (f a x))) (\a -> a) xs acc

-- Tail of a list
tail xs = \consCase nilCase ->
  xs (\x rest -> \skipped ->
    if skipped == 1
      then consCase x (rest 1)
      else rest 1
  ) (\_ -> nilCase) 0;

-- Head of a list
head xs = xs (\x _ -> x) 0;

-- Maps a function over a list
map f xs = \consCase nilCase -> xs (\x rest -> consCase (f x) rest) nilCase;

-- Sums all elements in a list
sum = foldr (+) 0;

-- Converts a list of digits to the full number
print xs = foldl (\acc x -> acc * 10 + x) 0 xs

-- Inserts an element into a sorted list
insert x sorted = \consCase nilCase ->
  sorted (\y rest ->
    if x <= y
      then consCase x (consCase y rest)
      else consCase y (insert x rest)
  ) (consCase x nilCase);

-- Insertion sort
insertionSort xs = foldr insert nil xs;

-- Example list: [3, 1, 2]
exampleList = cons 3 (cons 1 (cons 2 nil));

-- Sorted list: [1, 2, 3] → map (*10) → [10, 20, 30] → tail → [20, 30] → sum = 50
main = print exampleList
